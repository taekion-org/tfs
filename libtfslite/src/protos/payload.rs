// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payload.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Payload {
    // message fields
    pub operation: Payload_Operation,
    pub uuid: ::std::vec::Vec<u8>,
    pub mode: Payload_FileMode,
    pub block: ::protobuf::SingularPtrField<Payload_DataBlock>,
    pub filename: ::std::string::String,
    pub amount: u64,
    pub address: ::std::vec::Vec<u8>,
    pub permission: Payload_Permission,
    pub permission_public_key: ::std::vec::Vec<u8>,
    pub timestamp_create: i64,
    pub timestamp_append: i64,
    pub timestamp_seal: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Payload {
    fn default() -> &'a Payload {
        <Payload as ::protobuf::Message>::default_instance()
    }
}

impl Payload {
    pub fn new() -> Payload {
        ::std::default::Default::default()
    }

    // .Payload.Operation operation = 1;


    pub fn get_operation(&self) -> Payload_Operation {
        self.operation
    }
    pub fn clear_operation(&mut self) {
        self.operation = Payload_Operation::FILE_CREATE;
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: Payload_Operation) {
        self.operation = v;
    }

    // bytes uuid = 2;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // .Payload.FileMode mode = 3;


    pub fn get_mode(&self) -> Payload_FileMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = Payload_FileMode::IMMUTABLE;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: Payload_FileMode) {
        self.mode = v;
    }

    // .Payload.DataBlock block = 4;


    pub fn get_block(&self) -> &Payload_DataBlock {
        self.block.as_ref().unwrap_or_else(|| <Payload_DataBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: Payload_DataBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut Payload_DataBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> Payload_DataBlock {
        self.block.take().unwrap_or_else(|| Payload_DataBlock::new())
    }

    // string filename = 5;


    pub fn get_filename(&self) -> &str {
        &self.filename
    }
    pub fn clear_filename(&mut self) {
        self.filename.clear();
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        &mut self.filename
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filename, ::std::string::String::new())
    }

    // uint64 amount = 6;


    pub fn get_amount(&self) -> u64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    // bytes address = 7;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // .Payload.Permission permission = 9;


    pub fn get_permission(&self) -> Payload_Permission {
        self.permission
    }
    pub fn clear_permission(&mut self) {
        self.permission = Payload_Permission::UNSET;
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: Payload_Permission) {
        self.permission = v;
    }

    // bytes permission_public_key = 10;


    pub fn get_permission_public_key(&self) -> &[u8] {
        &self.permission_public_key
    }
    pub fn clear_permission_public_key(&mut self) {
        self.permission_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_permission_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.permission_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_permission_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.permission_public_key
    }

    // Take field
    pub fn take_permission_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.permission_public_key, ::std::vec::Vec::new())
    }

    // int64 timestamp_create = 11;


    pub fn get_timestamp_create(&self) -> i64 {
        self.timestamp_create
    }
    pub fn clear_timestamp_create(&mut self) {
        self.timestamp_create = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_create(&mut self, v: i64) {
        self.timestamp_create = v;
    }

    // int64 timestamp_append = 12;


    pub fn get_timestamp_append(&self) -> i64 {
        self.timestamp_append
    }
    pub fn clear_timestamp_append(&mut self) {
        self.timestamp_append = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_append(&mut self, v: i64) {
        self.timestamp_append = v;
    }

    // int64 timestamp_seal = 13;


    pub fn get_timestamp_seal(&self) -> i64 {
        self.timestamp_seal
    }
    pub fn clear_timestamp_seal(&mut self) {
        self.timestamp_seal = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_seal(&mut self, v: i64) {
        self.timestamp_seal = v;
    }
}

impl ::protobuf::Message for Payload {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.operation, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filename)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.permission, 9, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.permission_public_key)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp_create = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp_append = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp_seal = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation != Payload_Operation::FILE_CREATE {
            my_size += ::protobuf::rt::enum_size(1, self.operation);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuid);
        }
        if self.mode != Payload_FileMode::IMMUTABLE {
            my_size += ::protobuf::rt::enum_size(3, self.mode);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.filename.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.filename);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.address);
        }
        if self.permission != Payload_Permission::UNSET {
            my_size += ::protobuf::rt::enum_size(9, self.permission);
        }
        if !self.permission_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.permission_public_key);
        }
        if self.timestamp_create != 0 {
            my_size += ::protobuf::rt::value_size(11, self.timestamp_create, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp_append != 0 {
            my_size += ::protobuf::rt::value_size(12, self.timestamp_append, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp_seal != 0 {
            my_size += ::protobuf::rt::value_size(13, self.timestamp_seal, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.operation != Payload_Operation::FILE_CREATE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.operation))?;
        }
        if !self.uuid.is_empty() {
            os.write_bytes(2, &self.uuid)?;
        }
        if self.mode != Payload_FileMode::IMMUTABLE {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.filename.is_empty() {
            os.write_string(5, &self.filename)?;
        }
        if self.amount != 0 {
            os.write_uint64(6, self.amount)?;
        }
        if !self.address.is_empty() {
            os.write_bytes(7, &self.address)?;
        }
        if self.permission != Payload_Permission::UNSET {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&self.permission))?;
        }
        if !self.permission_public_key.is_empty() {
            os.write_bytes(10, &self.permission_public_key)?;
        }
        if self.timestamp_create != 0 {
            os.write_int64(11, self.timestamp_create)?;
        }
        if self.timestamp_append != 0 {
            os.write_int64(12, self.timestamp_append)?;
        }
        if self.timestamp_seal != 0 {
            os.write_int64(13, self.timestamp_seal)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Payload {
        Payload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Payload_Operation>>(
                "operation",
                |m: &Payload| { &m.operation },
                |m: &mut Payload| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &Payload| { &m.uuid },
                |m: &mut Payload| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Payload_FileMode>>(
                "mode",
                |m: &Payload| { &m.mode },
                |m: &mut Payload| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Payload_DataBlock>>(
                "block",
                |m: &Payload| { &m.block },
                |m: &mut Payload| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filename",
                |m: &Payload| { &m.filename },
                |m: &mut Payload| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &Payload| { &m.amount },
                |m: &mut Payload| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &Payload| { &m.address },
                |m: &mut Payload| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Payload_Permission>>(
                "permission",
                |m: &Payload| { &m.permission },
                |m: &mut Payload| { &mut m.permission },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "permission_public_key",
                |m: &Payload| { &m.permission_public_key },
                |m: &mut Payload| { &mut m.permission_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp_create",
                |m: &Payload| { &m.timestamp_create },
                |m: &mut Payload| { &mut m.timestamp_create },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp_append",
                |m: &Payload| { &m.timestamp_append },
                |m: &mut Payload| { &mut m.timestamp_append },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp_seal",
                |m: &Payload| { &m.timestamp_seal },
                |m: &mut Payload| { &mut m.timestamp_seal },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Payload>(
                "Payload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Payload {
        static instance: ::protobuf::rt::LazyV2<Payload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Payload::new)
    }
}

impl ::protobuf::Clear for Payload {
    fn clear(&mut self) {
        self.operation = Payload_Operation::FILE_CREATE;
        self.uuid.clear();
        self.mode = Payload_FileMode::IMMUTABLE;
        self.block.clear();
        self.filename.clear();
        self.amount = 0;
        self.address.clear();
        self.permission = Payload_Permission::UNSET;
        self.permission_public_key.clear();
        self.timestamp_create = 0;
        self.timestamp_append = 0;
        self.timestamp_seal = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Payload_DataBlock {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub sha224: ::std::vec::Vec<u8>,
    pub number: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Payload_DataBlock {
    fn default() -> &'a Payload_DataBlock {
        <Payload_DataBlock as ::protobuf::Message>::default_instance()
    }
}

impl Payload_DataBlock {
    pub fn new() -> Payload_DataBlock {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // bytes sha224 = 2;


    pub fn get_sha224(&self) -> &[u8] {
        &self.sha224
    }
    pub fn clear_sha224(&mut self) {
        self.sha224.clear();
    }

    // Param is passed by value, moved
    pub fn set_sha224(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha224 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha224(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sha224
    }

    // Take field
    pub fn take_sha224(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sha224, ::std::vec::Vec::new())
    }

    // uint64 number = 3;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }
}

impl ::protobuf::Message for Payload_DataBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sha224)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if !self.sha224.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sha224);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if !self.sha224.is_empty() {
            os.write_bytes(2, &self.sha224)?;
        }
        if self.number != 0 {
            os.write_uint64(3, self.number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Payload_DataBlock {
        Payload_DataBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Payload_DataBlock| { &m.data },
                |m: &mut Payload_DataBlock| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sha224",
                |m: &Payload_DataBlock| { &m.sha224 },
                |m: &mut Payload_DataBlock| { &mut m.sha224 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &Payload_DataBlock| { &m.number },
                |m: &mut Payload_DataBlock| { &mut m.number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Payload_DataBlock>(
                "Payload.DataBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Payload_DataBlock {
        static instance: ::protobuf::rt::LazyV2<Payload_DataBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Payload_DataBlock::new)
    }
}

impl ::protobuf::Clear for Payload_DataBlock {
    fn clear(&mut self) {
        self.data.clear();
        self.sha224.clear();
        self.number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Payload_DataBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload_DataBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Payload_Operation {
    FILE_CREATE = 0,
    FILE_APPEND = 1,
    FILE_SEAL = 2,
    FILE_DESTROY = 3,
    ACCOUNT_DEPOSIT = 4,
    ACCOUNT_TRANSFER = 5,
    PERMISSION_SET = 6,
    PERMISSION_CLEAR = 7,
    TIMESTAMP_SET = 8,
}

impl ::protobuf::ProtobufEnum for Payload_Operation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Payload_Operation> {
        match value {
            0 => ::std::option::Option::Some(Payload_Operation::FILE_CREATE),
            1 => ::std::option::Option::Some(Payload_Operation::FILE_APPEND),
            2 => ::std::option::Option::Some(Payload_Operation::FILE_SEAL),
            3 => ::std::option::Option::Some(Payload_Operation::FILE_DESTROY),
            4 => ::std::option::Option::Some(Payload_Operation::ACCOUNT_DEPOSIT),
            5 => ::std::option::Option::Some(Payload_Operation::ACCOUNT_TRANSFER),
            6 => ::std::option::Option::Some(Payload_Operation::PERMISSION_SET),
            7 => ::std::option::Option::Some(Payload_Operation::PERMISSION_CLEAR),
            8 => ::std::option::Option::Some(Payload_Operation::TIMESTAMP_SET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Payload_Operation] = &[
            Payload_Operation::FILE_CREATE,
            Payload_Operation::FILE_APPEND,
            Payload_Operation::FILE_SEAL,
            Payload_Operation::FILE_DESTROY,
            Payload_Operation::ACCOUNT_DEPOSIT,
            Payload_Operation::ACCOUNT_TRANSFER,
            Payload_Operation::PERMISSION_SET,
            Payload_Operation::PERMISSION_CLEAR,
            Payload_Operation::TIMESTAMP_SET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Payload_Operation>("Payload.Operation", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Payload_Operation {
}

impl ::std::default::Default for Payload_Operation {
    fn default() -> Self {
        Payload_Operation::FILE_CREATE
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload_Operation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Payload_FileMode {
    IMMUTABLE = 0,
    DESTROYABLE = 1,
}

impl ::protobuf::ProtobufEnum for Payload_FileMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Payload_FileMode> {
        match value {
            0 => ::std::option::Option::Some(Payload_FileMode::IMMUTABLE),
            1 => ::std::option::Option::Some(Payload_FileMode::DESTROYABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Payload_FileMode] = &[
            Payload_FileMode::IMMUTABLE,
            Payload_FileMode::DESTROYABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Payload_FileMode>("Payload.FileMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Payload_FileMode {
}

impl ::std::default::Default for Payload_FileMode {
    fn default() -> Self {
        Payload_FileMode::IMMUTABLE
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload_FileMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Payload_Permission {
    UNSET = 0,
    SET_PERMISSION = 1,
    BATCHER = 2,
    DEPOSIT = 3,
    TIMESTAMP = 4,
}

impl ::protobuf::ProtobufEnum for Payload_Permission {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Payload_Permission> {
        match value {
            0 => ::std::option::Option::Some(Payload_Permission::UNSET),
            1 => ::std::option::Option::Some(Payload_Permission::SET_PERMISSION),
            2 => ::std::option::Option::Some(Payload_Permission::BATCHER),
            3 => ::std::option::Option::Some(Payload_Permission::DEPOSIT),
            4 => ::std::option::Option::Some(Payload_Permission::TIMESTAMP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Payload_Permission] = &[
            Payload_Permission::UNSET,
            Payload_Permission::SET_PERMISSION,
            Payload_Permission::BATCHER,
            Payload_Permission::DEPOSIT,
            Payload_Permission::TIMESTAMP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Payload_Permission>("Payload.Permission", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Payload_Permission {
}

impl ::std::default::Default for Payload_Permission {
    fn default() -> Self {
        Payload_Permission::UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload_Permission {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\"\xe0\x06\n\x07Payload\x120\n\toperation\x18\x01\x20\
    \x01(\x0e2\x12.Payload.OperationR\toperation\x12\x12\n\x04uuid\x18\x02\
    \x20\x01(\x0cR\x04uuid\x12%\n\x04mode\x18\x03\x20\x01(\x0e2\x11.Payload.\
    FileModeR\x04mode\x12(\n\x05block\x18\x04\x20\x01(\x0b2\x12.Payload.Data\
    BlockR\x05block\x12\x1a\n\x08filename\x18\x05\x20\x01(\tR\x08filename\
    \x12\x16\n\x06amount\x18\x06\x20\x01(\x04R\x06amount\x12\x18\n\x07addres\
    s\x18\x07\x20\x01(\x0cR\x07address\x123\n\npermission\x18\t\x20\x01(\x0e\
    2\x13.Payload.PermissionR\npermission\x122\n\x15permission_public_key\
    \x18\n\x20\x01(\x0cR\x13permissionPublicKey\x12)\n\x10timestamp_create\
    \x18\x0b\x20\x01(\x03R\x0ftimestampCreate\x12)\n\x10timestamp_append\x18\
    \x0c\x20\x01(\x03R\x0ftimestampAppend\x12%\n\x0etimestamp_seal\x18\r\x20\
    \x01(\x03R\rtimestampSeal\x1aO\n\tDataBlock\x12\x12\n\x04data\x18\x01\
    \x20\x01(\x0cR\x04data\x12\x16\n\x06sha224\x18\x02\x20\x01(\x0cR\x06sha2\
    24\x12\x16\n\x06number\x18\x03\x20\x01(\x04R\x06number\"\xb6\x01\n\tOper\
    ation\x12\x0f\n\x0bFILE_CREATE\x10\0\x12\x0f\n\x0bFILE_APPEND\x10\x01\
    \x12\r\n\tFILE_SEAL\x10\x02\x12\x10\n\x0cFILE_DESTROY\x10\x03\x12\x13\n\
    \x0fACCOUNT_DEPOSIT\x10\x04\x12\x14\n\x10ACCOUNT_TRANSFER\x10\x05\x12\
    \x12\n\x0ePERMISSION_SET\x10\x06\x12\x14\n\x10PERMISSION_CLEAR\x10\x07\
    \x12\x11\n\rTIMESTAMP_SET\x10\x08\"*\n\x08FileMode\x12\r\n\tIMMUTABLE\
    \x10\0\x12\x0f\n\x0bDESTROYABLE\x10\x01\"T\n\nPermission\x12\t\n\x05UNSE\
    T\x10\0\x12\x12\n\x0eSET_PERMISSION\x10\x01\x12\x0b\n\x07BATCHER\x10\x02\
    \x12\x0b\n\x07DEPOSIT\x10\x03\x12\r\n\tTIMESTAMP\x10\x04b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
